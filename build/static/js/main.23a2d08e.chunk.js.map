{"version":3,"sources":["components/Home.js","components/Profile.js","components/Login.js","components/Register.js","components/NewPost.js","components/Users.js","App.js","index.js"],"names":["Home","useState","data","setData","toggleEditPost","setToggleEditPost","editPostData","setEditPostData","err","setErr","userid","setUserid","show","setShow","handleClose","useEffect","token","JSON","parse","localStorage","getItem","fetch","credentials","method","headers","body","stringify","then","res","json","token1","split","id","Buffer","from","toString","window","location","href","fluid","className","md","xs","sm","lg","onSubmit","e","preventDefault","title","content","postid","target","value","length","status","variant","style","cursor","onClick","Group","controlId","Label","Control","type","placeholder","as","rows","setTimeout","dispErr","map","item","index","Header","Body","firstname","lastname","username","_id","onHide","Title","Footer","handleDelete","Profile","loadProfileErr","setLoadProfileErr","editProfileErr","setEditProfileErr","fetchData","a","console","log","removeItem","editProfile","updated","i","Container","Row","Col","Form","profile","email","address","phoneNumber","Button","Alert","require","config","Login","validToken","setValidToken","handleSubmit","pass","password","setItem","Text","success","Register","newUser","alert","NewPost","error","newPost","required","Users","pageErr","setPageErr","results","setResults","setProfile","unfollow","FormControl","ListGroup","Item","followings","indexOf","follow","App","Navbar","bg","expand","Brand","Toggle","Collapse","Nav","Link","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23a2d08e.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { Col, Row, Container, Card, Button, Form, Modal, Alert } from \"react-bootstrap\"\n\nexport default function Home() {\n    const [data, setData] = useState()\n    // toggle edit post view\n    const [toggleEditPost, setToggleEditPost] = useState(false)\n    // set post data so that the user can see what was there in the original post\n    const [editPostData, setEditPostData] = useState()\n    // set any errs in the page\n    const [err, setErr] = useState(null)\n    // set user id in the page to allow to edit only user-generated posts\n    const [userid, setUserid] = useState()\n\n    // toggle delete post stuff\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n\n\n    // get all posts\n    useEffect(() => {\n        const token = JSON.parse(localStorage.getItem('token'))\n\n        fetch(`https://mern-stack-allen.herokuapp.com/posts/`, {\n            credentials: 'include',\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ token })\n        }).then(res => { return res.json() }).then(data => setData(data))\n\n        // use base64decode to ensure edit and delete buttons work only for the user's posts\n        const token1 = localStorage.getItem('token').split('.')\n        const id = Buffer.from(token1[1], 'base64').toString()\n        setUserid(JSON.parse(id))\n    }, [])\n\n    // check if user is authorized to access home page\n    if (err === 401 || !localStorage.getItem('token')) {\n        // localStorage.removeItem('token')\n        window.location.href = '/login'\n    }\n\n    // handle delete\n    const handleDelete = (id) => {\n        const token = JSON.parse(localStorage.getItem('token'))\n\n        fetch(`https://mern-stack-allen.herokuapp.com/posts/deletepost`, {\n            credentials: 'include',\n            headers: { \"Content-Type\": \"application/json\" },\n            method: \"POST\",\n            body: JSON.stringify({ token, postid: id })\n        })\n\n        // setTimeout(() => {\n        window.location.href = '/'\n        // }, 2000)\n    }\n\n    // handle edit\n    const handleEdit = (e) => {\n        e.preventDefault()\n\n        const token = JSON.parse(localStorage.getItem('token'))\n        const postid = editPostData.id\n        // mongodb seems to accept values even if title or content is\n        // empty, so we check them here to ensure they are not empty\n        // if the fields are empty, then the user doesn't want to change it so \n        // we post the original values\n        var title\n        if (e.target[1].value.length > 0) {\n            title = e.target[1].value\n        } else {\n            title = editPostData.title\n        }\n        var content\n        if (e.target[2].value.length > 0) {\n            content = e.target[2].value\n        } else {\n            content = editPostData.content\n        }\n\n        e.preventDefault()\n        fetch(`https://mern-stack-allen.herokuapp.com/posts/editpost`, {\n            credentials: \"include\",\n            method: 'PUT',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ token, postid, title, content })\n        }).then(res => { setErr(res.status); return res.json() })\n    }\n\n    // this will display success when trying to edit posts \n    const dispErr = () => {\n        if (err) {\n            setTimeout(() => {\n                window.location.href = '/'\n            }, 1000)\n            return <Alert variant='success'>\n                You have edited your post\n            </Alert>\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-center\" md='auto'>\n                <Col xs sm='10' lg='8'>\n                    <br></br>\n                    {/* Toggles the title */}\n                    <Row>\n                        {!toggleEditPost ? <h2>Posts by you and your followers</h2> : <h5>Edit post</h5>}\n                    </Row>\n                    {/* This part handles the form */}\n                    {toggleEditPost &&\n                        <>\n                            <Row>\n                                <Form onSubmit={handleEdit}>\n                                    <Button variant='primary' style={{ cursor: 'pointer' }} onClick={() => { setToggleEditPost(!toggleEditPost) }}>Cancel edit</Button>\n                                    <Form.Group className=\"mb-3\" controlId=\"title\">\n                                        <Form.Label>Title</Form.Label>\n                                        <Form.Control type=\"text\" placeholder={editPostData.title} />\n                                    </Form.Group>\n\n                                    <Form.Group className=\"mb-3\" controlId=\"content\">\n                                        <Form.Label>Content</Form.Label>\n                                        <Form.Control as=\"textarea\" rows={8} placeholder={editPostData.content} />\n                                    </Form.Group>\n\n                                    <Button variant=\"info\" type=\"submit\" style={{ cursor: 'pointer' }}>\n                                        Confirm edit post\n                                    </Button>\n                                </Form>\n                            </Row>\n                            <br></br>\n                            <Row>{dispErr(err)}</Row>\n                        </>\n                    }\n                    {(!toggleEditPost && userid && data && data.length > 0) && data.map((item, index) => {\n                        return (\n                            <>\n                                <br></br>\n                                {/* this part displays the posts */}\n                                <Card key={index}>\n                                    <Card.Header>{item.title}</Card.Header>\n                                    <Card.Body>\n                                        <blockquote className=\"blockquote mb-0\">\n                                            <p>{' '}{item.content}{' '}</p>\n                                            <footer className=\"blockquote-footer\">\n                                                By {item.firstname} {item.lastname}: <cite title=\"Source Title\">@{item.username}</cite>\n                                            </footer>\n                                        </blockquote>\n                                    </Card.Body>\n                                </Card>\n                                {/* This is the part which allows the user to edit their post*/}\n                                {(userid.id === item.userid) && <Button style={{ cursor: 'pointer' }} variant='primary' onClick={() => {\n                                    setToggleEditPost(!toggleEditPost);\n                                    setEditPostData({ id: item._id, title: item.title, content: item.content });\n                                }}>Edit post</Button>}\n                                {/* This part allows user to delete the post */}\n                                {(userid.id === item.userid) &&\n                                    <>\n                                        <Button style={{ cursor: 'pointer' }} variant=\"warning\" onClick={() => { setEditPostData({ id: item._id }); setShow(true) }}>\n                                            Delete post\n                                        </Button>\n\n                                        <Modal show={show} onHide={handleClose}>\n                                            <Modal.Header>\n                                                <Modal.Title>Delete this post</Modal.Title>\n                                            </Modal.Header>\n                                            <Modal.Body>Are you sure you want to delete this post?</Modal.Body>\n                                            <Modal.Footer>\n                                                <Button style={{ cursor: 'pointer' }} onClick={handleClose}>\n                                                    Cancel\n                                                </Button>\n                                                <Button style={{ cursor: 'pointer' }} variant=\"danger\" onClick={() => handleDelete(editPostData.id)}>\n                                                    Delete this post\n                                                </Button>\n                                            </Modal.Footer>\n                                        </Modal>\n                                    </>}\n                                <br></br>\n                            </>\n                        )\n                    })}\n                    {(data && data.length === 0) && <><br></br><Row><p>You have no posts to display</p></Row></>}\n                    <br></br>\n                </Col>\n            </Row>\n        </Container >\n\n    )\n}\n","import { useState } from \"react\"\nimport { Col, Alert, Row, Container, Button, Form } from \"react-bootstrap\"\n// import { Redirect, useHistory } from 'react-router-dom'\nimport { useEffect } from \"react\"\nrequire('dotenv').config()\n\nexport default function Profile() {\n    const [data, setData] = useState(null)\n    const [loadProfileErr, setLoadProfileErr] = useState(null)\n    const [editProfileErr, setEditProfileErr] = useState(null)\n\n    // fetch profile data\n    useEffect(() => {\n        fetchData()\n        // eslint-disable-next-line\n    }, [])\n\n    // function to fetch profile datas\n    const fetchData = async () => {\n        const token = JSON.parse(localStorage.getItem(\"token\"))\n\n        fetch(`https://mern-stack-allen.herokuapp.com/users/profile`, {\n            credentials: 'include',\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ token: token })\n        }).then(res => {\n            // sets res status to loadProfileErr to check if user is authorized\n            setLoadProfileErr(res.status)\n            return res.json()\n        }).then(data => {\n            // sets data to display to user\n            setData(data)\n        })\n        console.log(data)\n    }\n\n    // checks if user is authorized\n    if (loadProfileErr === 401 || editProfileErr === 401) {\n        localStorage.removeItem('token')\n        window.location.href = '/login'\n    }\n\n    // when user clicks editprofile it gets the form values and posts them\n    const editProfile = async (e) => {\n        e.preventDefault()\n        const updated = {}\n        updated['token'] = JSON.parse(localStorage.getItem(\"token\"))\n\n        for (var i = 0; i < e.target.length; i++) {\n            if (e.target[i].value) {\n                updated[e.target[i].id] = e.target[i].value\n            }\n        }\n\n        fetch(`https://mern-stack-allen.herokuapp.com/users/editprofile`, {\n            credentials: 'include',\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(updated)\n        }).then(res => setEditProfileErr(res.status))\n    }\n\n    // check if edit profile details are valid\n    const dispErr = (err) => {\n        if (err === 200) {\n            setTimeout(() => { window.location.href = '/profile' }, 2000)\n            return <Alert variant='success'>\n                Success!\n            </Alert>\n\n        } else if (err === 400) {\n            return <Alert variant='danger'>\n                Username/Email taken!\n            </Alert>\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-center\">\n                {data &&\n                    <Col xs sm='8' lg='5'>\n                        <br></br>\n                        <Row>\n                            <h1>Your Profile</h1>\n                        </Row>\n                        <br></br>\n                        <Form onSubmit={editProfile}>\n                            <Form.Group className=\"mb-3\" controlId=\"username\">\n                                <Form.Label>Username</Form.Label>\n                                <Form.Control type=\"text\" placeholder={data.profile.username} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"email\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control type=\"email\" placeholder={data.profile.email} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"firstname\">\n                                <Form.Label>First name</Form.Label>\n                                <Form.Control type=\"text\" placeholder={data.profile.firstname} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"lastname\">\n                                <Form.Label>Last name</Form.Label>\n                                <Form.Control type=\"text\" placeholder={data.profile.lastname} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"address\">\n                                <Form.Label>Address</Form.Label>\n                                <Form.Control type=\"text\" placeholder={data.profile.address} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"phoneNumber\">\n                                <Form.Label>Phone number</Form.Label>\n                                <Form.Control type=\"text\" placeholder={data.profile.phoneNumber} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"password\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"******\" />\n                            </Form.Group>\n\n                            <Button variant=\"primary\" type=\"submit\" style={{ cursor: 'pointer' }}>\n                                Edit Profile\n                            </Button>\n                        </Form>\n                        <br></br>\n                        <Row>\n                            {dispErr(editProfileErr)}\n                        </Row>\n                    </Col>\n                }\n            </Row>\n\n\n        </Container >\n    )\n}\n\n","import { Row, Form, Button, Alert, Container, Col } from \"react-bootstrap\"\nimport { useState, useEffect } from \"react\"\n\nexport default function Login() {\n    const [err, setErr] = useState()\n    const [validToken, setValidToken] = useState()\n\n    // checking if user's token is\n    useEffect(() => {\n        const token = JSON.parse(localStorage.getItem('token'))\n        fetch(`https://mern-stack-allen.herokuapp.com/users/isvalidtoken`, {\n            credentials: 'include',\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ token: token })\n        }).then(res => setValidToken(res.status))\n    }, [])\n\n    // if user is already logged in\n    if (validToken === 200) {\n        window.location.href = '/'\n    }\n\n    // this will display any errors when trying to log in \n    const dispErr = (err) => {\n        if (err === 200) {\n            const success = <Alert variant='success'>\n                Success!\n            </Alert>\n\n            setTimeout(() => {\n                window.location.href = '/'\n            }, 1000)\n\n            return success\n        } else if (err === 401) {\n            return <Alert variant='danger'>\n                Invalid credentials\n            </Alert>\n        } else if (err === 404) {\n            return <Alert variant='warning'>\n                User not found\n            </Alert>\n        } else if (err === 400) {\n            return <Alert variant='info'>\n                Enter your credentials!\n            </Alert>\n        }\n    }\n\n    // handles the login post request on form submit\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        const email = e.target[0].value\n        const pass = e.target[1].value\n\n        await fetch(`https://mern-stack-allen.herokuapp.com/users/login`, {\n            credentials: 'include',\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ email: email, password: pass })\n        }).then(res => {\n            setErr(res.status);\n            res.json().then(data => {\n                localStorage.setItem('token', JSON.stringify(data))\n            })\n        })\n    }\n\n\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-center\">\n                <Col xs sm='5' lg='5'>\n                    <Row>\n                        <br></br>\n                        <h1>Login</h1>\n                        <br></br>\n                    </Row>\n                    <Row>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                                <Form.Label>Email address</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" />\n                                <Form.Text className=\"text-muted\">\n                                    We'll never share your email with anyone else.\n                                </Form.Text>\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </Form.Group>\n                            <Button variant=\"primary\" type=\"submit\" style={{ cursor: 'pointer' }}>\n                                Submit\n                            </Button>\n                        </Form>\n                    </Row>\n                    <br></br>\n                    <Row>\n                        {dispErr(err)}\n                    </Row>\n                </Col>\n            </Row>\n            <br></br>\n\n        </Container >\n    )\n}\n","import { useState } from \"react\"\nimport { Col, Row, Container, Form, Button } from \"react-bootstrap\"\n\nexport default function Register() {\n    const [err, setErr] = useState()\n\n    const register = (e) => {\n        e.preventDefault()\n        var newUser = {}\n\n        // check if confirm passwords match\n        if (e.target[6].value !== e.target[7].value) {\n            alert(\"Passwords don't match!\")\n            // if they match, set form values to dict newUser\n        } else if (e.target[6].value === e.target[7].value) {\n            // check if form is filled\n            if (e.target.length >= 7) {\n                for (var i = 0; i < (e.target.length); i++) {\n                    // console.log(e.target[i].id + '\\n' + e.target[i].value)\n                    newUser[e.target[i].id] = e.target[i].value\n                }\n\n                fetch(`https://mern-stack-allen.herokuapp.com/users/register`, {\n                    credentials: 'include',\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(newUser)\n                }).then(res => { setErr(res.status) })\n\n                if (err === 200) {\n                    alert('Success')\n                    setTimeout(() => {\n                        window.location.href = '/login'\n                    }, 1000)\n                } else if (err === 500) {\n                    alert('Username or email is already taken!')\n                }\n            } else {\n                alert('Fill out form!')\n            }\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-center\">\n                <Col xs sm='8' lg='5'>\n                    <br></br>\n                    <Row>\n                        <h2>Register a new user</h2>\n                    </Row>\n                    <br></br>\n                    <Form onSubmit={register}>\n                        <Form.Group className=\"mb-3\" controlId=\"username\">\n                            <Form.Label>Enter username</Form.Label>\n                            <Form.Control type=\"text\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"email\">\n                            <Form.Label>Enter email</Form.Label>\n                            <Form.Control type=\"email\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"firstname\">\n                            <Form.Label>Enter first name</Form.Label>\n                            <Form.Control type=\"text\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"lastname\">\n                            <Form.Label>Enter last name</Form.Label>\n                            <Form.Control type=\"text\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"address\">\n                            <Form.Label>Enter address</Form.Label>\n                            <Form.Control type=\"text\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"phoneNumber\">\n                            <Form.Label>Enter phone number</Form.Label>\n                            <Form.Control type=\"text\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Ensure that you have a strong password\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"confirmpassword\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Confirm your password\" />\n                        </Form.Group>\n\n                        <Button variant=\"primary\" type=\"submit\" style={{ cursor: 'pointer' }}>\n                            Register a new user\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n\n    )\n}\n","import { Row, Form, Button, Container, Col, Alert } from \"react-bootstrap\"\nimport { useState } from \"react\"\n\nexport default function NewPost() {\n    const [err, setErr] = useState()\n\n    // handle submitting new post\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const title = e.target[0].value\n        const content = e.target[1].value\n\n        const newPost = { title: title, content: content }\n        newPost['token'] = JSON.parse(localStorage.getItem(\"token\"))\n\n        fetch(`https://mern-stack-allen.herokuapp.com/posts/addpost`, {\n            credentials: 'include',\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(newPost)\n        }).then(res => setErr(res.status))\n    }\n\n    if (err === 401 || !localStorage.getItem('token')) {\n        // localStorage.removeItem('token')\n        window.location.href = '/login'\n    }\n\n    const dispErr = (error) => {\n        if (error === 200) {\n            setTimeout(() => { window.location.href = '/' }, 2000)\n            return <Alert variant='success'>\n                Success!\n            </Alert>\n\n        } else if (error === 401) {\n            return <Alert variant='danger'>\n                Unauthorized\n            </Alert>\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-center\">\n                <Col xs sm='10' lg='8'>\n                    <br></br>\n                    <Row>\n                        <br></br>\n                        <h1>Create new post</h1>\n                        <br></br>\n                    </Row>\n                    <Row>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group className=\"mb-3\" controlId=\"title\">\n                                <Form.Label>Title</Form.Label>\n                                <Form.Control type=\"text\" required placeholder=\"Enter title\" />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"content\">\n                                <Form.Label>Content</Form.Label>\n                                <Form.Control as=\"textarea\" required rows={3} placeholder='Enter content' />\n                            </Form.Group>\n                            <Button variant=\"info\" type=\"submit\" style={{ cursor: 'pointer' }}>\n                                Submit\n                            </Button>\n                        </Form>\n                    </Row>\n                    <br></br>\n                    <Row>\n                        {dispErr(err)}\n                    </Row>\n                </Col>\n            </Row>\n\n        </Container >\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { Container, Form, Row, Col, FormControl, Button, ListGroup } from 'react-bootstrap'\n\nexport default function Users() {\n    const [pageErr, setPageErr] = useState()\n    const [results, setResults] = useState()\n    const [profile, setProfile] = useState()\n\n    // checking if user's token is valid\n    useEffect(() => {\n        const token = JSON.parse(localStorage.getItem('token'))\n        fetch(`https://mern-stack-allen.herokuapp.com/users/profile`, {\n            credentials: 'include',\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ token })\n        }).then(res => { setPageErr(res.status); return res.json() }).then(data => setProfile(data))\n\n\n    }, [])\n\n    // if user is already logged in\n    if (pageErr === 401) {\n        window.location.href = '/login'\n    }\n\n\n\n    // search functionality\n    const search = (e) => {\n        e.preventDefault()\n\n        fetch(`https://mern-stack-allen.herokuapp.com/users/findusers/${e.target[0].value}`, {\n            credentials: 'include',\n            method: \"GET\",\n            headers: { \"Content-Type\": \"application/json\" },\n        }).then(res => { setPageErr(res.status); return res.json() }).then(data => setResults(data))\n    }\n\n    // follow function\n    const follow = (id) => {\n        if (id) {\n            const token = JSON.parse(localStorage.getItem('token'))\n            fetch(`https://mern-stack-allen.herokuapp.com/users/follow/${id}`, {\n                credentials: 'include',\n                method: 'POST',\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ token })\n            })\n        }\n        setTimeout(() => {\n            window.location.href = '/users'\n        }, 500)\n    }\n\n    // unfollow func\n    const unfollow = (id) => {\n        if (id) {\n            const token = JSON.parse(localStorage.getItem('token'))\n            fetch(`https://mern-stack-allen.herokuapp.com/users/unfollow/${id}`, {\n                credentials: 'include',\n                method: 'POST',\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ token })\n            })\n        }\n        setTimeout(() => {\n            window.location.href = '/users'\n        }, 500)\n    }\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-center\">\n                <Col xs sm='8' lg='5'>\n                    <br></br>\n                    <h1>Find and follow other users</h1>\n                    <br></br>\n                    <Form className=\"d-flex\" onSubmit={search}>\n                        <FormControl\n                            type=\"search\"\n                            placeholder=\"Search\"\n                            className=\"mr-2\"\n                            aria-label=\"Search\"\n                        />\n                        <Button variant=\"outline-success\" type='submit' style={{ cursor: 'pointer' }}>Search</Button>\n                    </Form>\n                    <br></br>\n                    <Row>\n                        <ListGroup>\n                            {(results && profile) ?\n                                <>\n                                    <h4>By username</h4>\n                                    {results.map((item, index) => {\n                                        return (\n                                            <>\n                                                {profile.profile._id !== item._id &&\n                                                    <>\n                                                        <ListGroup.Item>@{item.username}</ListGroup.Item>\n                                                        {profile.profile.followings.indexOf(item._id) === -1 ?\n                                                            <Button className='btn btn-success btn-sm' style={{ cursor: 'pointer' }} onClick={() => { follow(item._id) }}>Follow</Button> :\n                                                            <Button className='btn btn-danger btn-sm' style={{ cursor: 'pointer' }} onClick={() => { unfollow(item._id) }}>Unfollow</Button>\n                                                        }\n                                                        <br></br>\n                                                    </>\n                                                }\n                                            </>\n                                        )\n                                    })}\n                                </>\n                                :\n                                <>\n                                    <h4>People you follow</h4>\n                                    {profile && profile.followings.map((item, index) => {\n                                        return (\n                                            <>\n                                                {/* ensure when followers loads, it doesn't contain the user themselves */}\n                                                {profile.profile._id !== item._id &&\n                                                    <>\n                                                        < ListGroup.Item key={index}>@{item.username}</ListGroup.Item>\n                                                        <Button className='btn btn-danger btn-sm' style={{ cursor: 'pointer' }} onClick={() => { unfollow(item._id) }}>Unfollow</Button>\n                                                        <br></br>\n                                                    </>\n                                                }\n                                            </>\n                                        )\n                                    })}\n                                </>\n                            }\n                        </ListGroup>\n                    </Row>\n                </Col>\n            </Row>\n        </Container >\n    )\n}\n","import { Nav, Navbar, Container } from 'react-bootstrap'\nimport {\n  Switch,\n  BrowserRouter as Route\n} from \"react-router-dom\";\nimport Profile from './components/Profile'\nimport Home from './components/Home'\nimport Login from './components/Login'\nimport Register from './components/Register'\nimport NewPost from './components/NewPost'\nimport Users from './components/Users';\n// import './styles.css'\n\nfunction App() {\n  const logOut = () => {\n    localStorage.removeItem('token')\n    window.location.href = '/login'\n  }\n\n  return (\n    <div >\n      <Navbar bg=\"light\" expand=\"xl\">\n        <Container>\n          <Navbar.Brand href=\"/\">Allen's Blog</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n              {!localStorage.getItem('token') &&\n                <>\n                  <Nav.Link href=\"/login\">Login</Nav.Link>\n                  <Nav.Link href=\"/register\">Register</Nav.Link>\n                </>\n              }\n              {localStorage.getItem('token') &&\n                <>\n                  <Nav className='me-auto'>\n                    <Nav.Link href=\"/profile\">Profile</Nav.Link>\n                    <Nav.Link href='/addpost'>Create new post</Nav.Link>\n                    <Nav.Link href='/users'>Find and follow other users</Nav.Link>\n                    <Nav.Link onClick={logOut}>Logout</Nav.Link>\n                  </Nav>\n                </>\n              }\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      {/* logic for routing */}\n      <Switch>\n        <Route exact path=\"/\" >\n          <Home />\n        </Route>\n        <Route exact path=\"/profile\">\n          <Profile />\n        </Route>\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n        <Route exact path=\"/register\">\n          <Register />\n        </Route>\n        <Route exact path=\"/addpost\">\n          <NewPost />\n        </Route>\n        <Route exact path=\"/users\">\n          <Users />\n        </Route>\n      </Switch>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}